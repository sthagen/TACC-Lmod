-- -*- lua -*-
testdescript = {
   owner   = "rtm",
   product = "modules",
   description = [[
	 Test initial module load
   ]],
   keywords = {"reset" },

   active = 1,
   testName = "reset",
   job_submit_method = "INTERACTIVE",

   runScript = [[

     . $(projectDir)/rt/common_funcs.sh

     unsetMT
     initStdEnvVars
     LUA=`findcmd lua`
     export PATH
     ORIGINAL_PATH=$PATH
     MODULEPATH_ROOT=$(testDir)/mf;     export MODULEPATH_ROOT
     MODULEPATH=$MODULEPATH_ROOT/Core;  export MODULEPATH

     rm -fr _stderr.* _stdout.* err.* out.* .lmodrc.lua .lmod.d

     LMOD_SYSTEM_DEFAULT_MODULES="admin:intel:openmpi:parmetis"
     export LMOD_SYSTEM_DEFAULT_MODULES

     cp $(projectDir)/init/lmodrc.lua .lmodrc.lua

     runLmod --version                          # 1
     runLmod load admin PrgEnv openmpi parmetis # 2
     runLmod purge                              # 3
     runLmod list                               # 4

     runLmod load admin PrgEnv openmpi parmetis # 5
     runLmod list                               # 6
     runLmod use $MODULEPATH_ROOT/User          # 7
     runLmod use $MODULEPATH_ROOT/User2         # 8 
     runLmod load foo                           # 9
     runLmod list                               #10
     runLmod reset                              #11
     runLmod list                               #12

     HOME=$ORIG_HOME
     PATH=$ORIGINAL_PATH

     cat _stdout.[0-9][0-9][0-9] > _stdout.orig
     joinBase64Results  -bash  _stdout.orig _stdout.new
     cleanUp _stdout.new out.txt

     cat _stderr.[0-9][0-9][0-9] > _stderr.orig
     cleanUp _stderr.orig err.txt

     rm -f results.csv
     wrapperDiff --csv results.csv $(testDir)/out.txt out.txt
     wrapperDiff --csv results.csv $(testDir)/err.txt err.txt
     testFinish -r $(resultFn) -t $(runtimeFn) results.csv
   ]],


   blessScript = [[
         # perform what is needed
   ]],

   tests = {
      { id='t1'},
   },

}
